{"ast":null,"code":"import _classCallCheck from \"/Users/mithu/Desktop/Code/Udacity/myReads/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mithu/Desktop/Code/Udacity/myReads/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mithu/Desktop/Code/Udacity/myReads/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mithu/Desktop/Code/Udacity/myReads/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mithu/Desktop/Code/Udacity/myReads/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/mithu/Desktop/Code/Udacity/myReads/src/ChangeShelf.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nvar ShelfChanger =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ShelfChanger, _Component);\n\n  function ShelfChanger() {\n    _classCallCheck(this, ShelfChanger);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ShelfChanger).apply(this, arguments));\n  }\n\n  _createClass(ShelfChanger, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          book = _this$props.book,\n          books = _this$props.books,\n          changeShelf = _this$props.changeShelf;\n      var currentShelf = 'moveTo';\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = books[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var shelf = _step.value;\n\n          if (shelf.id === book.id) {\n            currentShelf = shelf.shelf;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return React.createElement(\"div\", {\n        className: \"book-shelf-changer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, React.createElement(\"select\", {\n        onChange: function onChange(event) {\n          return changeShelf(book, event.target.value);\n        },\n        defaultValue: currentShelf,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"moveTo\",\n        disabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, \"Move to...\"), React.createElement(\"option\", {\n        value: \"currentlyReading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, \"Currently Reading\"), React.createElement(\"option\", {\n        value: \"wantToRead\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, \"Want to Read\"), React.createElement(\"option\", {\n        value: \"read\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, \"Read\"), React.createElement(\"option\", {\n        value: \"none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, \"None\")));\n    }\n  }]);\n\n  return ShelfChanger;\n}(Component);\n\nShelfChanger.propTypes = {\n  book: PropTypes.object.isRequired,\n  books: PropTypes.array.isRequired,\n  changeShelf: PropTypes.func.isRequired\n};\nexport default ShelfChanger;","map":{"version":3,"sources":["/Users/mithu/Desktop/Code/Udacity/myReads/src/ChangeShelf.js"],"names":["React","Component","PropTypes","ShelfChanger","props","book","books","changeShelf","currentShelf","shelf","id","event","target","value","propTypes","object","isRequired","array","func"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;IAEMC,Y;;;;;;;;;;;;;6BAOK;AAAA,wBAC8B,KAAKC,KADnC;AAAA,UACCC,IADD,eACCA,IADD;AAAA,UACOC,KADP,eACOA,KADP;AAAA,UACcC,WADd,eACcA,WADd;AAGP,UAAIC,YAAY,GAAG,QAAnB;AAHO;AAAA;AAAA;;AAAA;AAKP,6BAAkBF,KAAlB,8HAA0B;AAAA,cAAjBG,KAAiB;;AACxB,cAAIA,KAAK,CAACC,EAAN,KAAaL,IAAI,CAACK,EAAtB,EAA2B;AACvBF,YAAAA,YAAY,GAAGC,KAAK,CAACA,KAArB;AACH;AACF;AATM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWP,aACE;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAS,QAAA,QAAQ,EAAE,kBAACE,KAAD;AAAA,iBAAWJ,WAAW,CAACF,IAAD,EAAOM,KAAK,CAACC,MAAN,CAAaC,KAApB,CAAtB;AAAA,SAAnB;AACE,QAAA,YAAY,EAAGL,YADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEE;AAAQ,QAAA,KAAK,EAAC,QAAd;AAAuB,QAAA,QAAQ,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF,EAGE;AAAQ,QAAA,KAAK,EAAC,kBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAHF,EAIE;AAAQ,QAAA,KAAK,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAJF,EAKE;AAAQ,QAAA,KAAK,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF,EAME;AAAQ,QAAA,KAAK,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANF,CADF,CADF;AAYD;;;;EA9BwBP,S;;AAArBE,Y,CACGW,S,GAAY;AACjBT,EAAAA,IAAI,EAAEH,SAAS,CAACa,MAAV,CAAiBC,UADN;AAEjBV,EAAAA,KAAK,EAAEJ,SAAS,CAACe,KAAV,CAAgBD,UAFN;AAGjBT,EAAAA,WAAW,EAAEL,SAAS,CAACgB,IAAV,CAAeF;AAHX,C;AAiCrB,eAAeb,YAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\n\nclass ShelfChanger extends Component {\n  static propTypes = {\n    book: PropTypes.object.isRequired,\n    books: PropTypes.array.isRequired,\n    changeShelf: PropTypes.func.isRequired,\n  }\n\n  render() {\n    const { book, books, changeShelf } = this.props\n\n    let currentShelf = 'moveTo'\n\n    for (let shelf of books ) {\n      if (shelf.id === book.id)  {\n          currentShelf = shelf.shelf\n      }\n    }\n\n    return (\n      <div className=\"book-shelf-changer\">\n        <select  onChange={(event) => changeShelf(book, event.target.value)}\n          defaultValue={ currentShelf }>\n          <option value=\"moveTo\" disabled>Move to...</option>\n          <option value=\"currentlyReading\">Currently Reading</option>\n          <option value=\"wantToRead\">Want to Read</option>\n          <option value=\"read\">Read</option>\n          <option value=\"none\">None</option>\n        </select>\n      </div>\n    )\n  }\n\n}\n\nexport default ShelfChanger\n"]},"metadata":{},"sourceType":"module"}